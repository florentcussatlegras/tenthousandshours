// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  @@map("posts")
}

model CategoryTopic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  slug        String  @unique
  description String
  status      String  @default("active")
  topics      Topic[]
}

model Topic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String @unique
  slug        String @unique
  description String
  status      String @default("active")

  studyProcesses StudyProcess[]

  categoryTopicId String
  category        CategoryTopic @relation(fields: [categoryTopicId], references: [id])
}

model StudyProcess {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  slug        String
  description String

  totalHours Int @default(0)

  forecastedDedicatedHours       Int?
  forecastedDedicatedHoursPeriod String?
  forecastedAimReachedAt         DateTime?

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  studySessions StudySession[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudySession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  description String

  startedAt  DateTime
  finishedAt DateTime
  totalHours Int

  studyProcessId String
  studyProcess   StudyProcess @relation(fields: [studyProcessId], references: [id])
}

model User {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  firstname     String
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  studyProcesses StudyProcess[]
  sessions       Session[]
  accounts       Account[]

  @@map("user")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id        String    @id
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}
