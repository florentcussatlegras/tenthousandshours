// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  content String

  @@map("posts")
}

model CategoryTopic {
  id          String  @id @default(cuid())
  title       String  @unique
  slug        String  @unique
  description String
  topics      Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id              String         @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String         @unique
  slug            String         @unique
  description     String

  studyProcesses  StudyProcess[]

  categoryTopicId String
  category CategoryTopic @relation(fields: [categoryTopicId], references: [id])
}

model StudyProcess {
  id      String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  topicId String
  topic Topic @relation(fields: [topicId], references: [id])

  userId  String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  createdAt     DateTime
  updatedAt     DateTime

  name          String
  email         String @unique
  emailVerified Boolean
  image         String?
  
  studyProcesses  StudyProcess[]
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String @unique
  ipAddress String?
  userAgent String?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}
